using System.Collections;
using System.Collections.Generic;
using Unity.Burst.Intrinsics;
using UnityEngine;
using UnityEngine.UI;

public class GeradorDeLevel : MonoBehaviour
{
    public Sprite[] ArraySprites;
    int i = 0;
    void DesenhaNoMinimapa(Sala sala)
    {
        string nome;
        if (i == 0)
        {
            nome = "SalaInicial";
        }
        else
        {
            nome = "SalaMiniMapa" + i;
        }
        i++;
        GameObject Mapa = new GameObject(nome);

        Image SalaIcon = Mapa.AddComponent<Image>();
        SalaIcon.sprite = sala.SalaIcon;

        RectTransform rectTransform = SalaIcon.GetComponent<RectTransform>();
        rectTransform.sizeDelta = new Vector2(Level.altura, Level.largura) * Level.escalaIcon;
        rectTransform.position = sala.Localizacao * (Level.escalaIcon * Level.largura * Level.escala + (Level.preenchimento * Level.altura * Level.escala));

        SalaIcon.transform.SetParent(transform, false);

        Level.Salas.Add(sala);
    }

    int NumeroDeSalaAlteatorio()
    {
        return 6;
    }

    bool ChecaSalaExiste(Vector2 localizacao)
    {
        return (Level.Salas.Exists(x => x.Localizacao == localizacao));
    }

    bool ChecaSalaAoRedorExiste(Vector2 localizacao, string direcao)
    {
        switch (direcao)
        {
            case "Direita":
                {
                    // CHECA esquerda, cima e baixo
                    if (Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x - 1, localizacao.y)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y + 1)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y - 1)))
                    {
                        return true;
                    }
                    break;
                }
            case "Esquerda":
                {
                    // CHECA direita, cima e baixo
                    if (Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x + 1, localizacao.y)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y + 1)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y - 1)))
                    {
                        return true;
                    }
                    break;
                }
            case "Cima":
                {
                    // CHECA esquerda, direita e baixo
                    if (Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x - 1, localizacao.y)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x + 1, localizacao.y)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y - 1)))
                    {
                        return true;
                    }
                    break;
                }
            case "Baixo":
                {
                    // CHECA esquerda, cima e direita
                    if (Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x - 1, localizacao.y)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x, localizacao.y + 1)) ||
                        Level.Salas.Exists(x => x.Localizacao == new Vector2(localizacao.x + 1, localizacao.y)))
                    {
                        return true;
                    }
                    break;
                }
        }
        return false;
    }

    int auxiliar = 0;

    void GeraSala(Sala sala)
    {
        auxiliar++;

        if (auxiliar > 25)
        {
            return;
        }

        DesenhaNoMinimapa(sala);

        // ESQUERDA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(-1, 0) + sala.Localizacao;
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Direita"))
                {
                    if (Mathf.Abs(novaSala.Localizacao.x) < Level.limiteSalasAxis &&
                        Mathf.Abs(novaSala.Localizacao.y) < Level.limiteSalasAxis)
                    {
                        GeraSala(novaSala);
                    }
                }
            }
        }
        // DIREITA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(1, 0) + sala.Localizacao;
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Esquerda"))
                {
                    if (Mathf.Abs(novaSala.Localizacao.x) < Level.limiteSalasAxis &&
                        Mathf.Abs(novaSala.Localizacao.y) < Level.limiteSalasAxis)
                    {
                        GeraSala(novaSala);
                    }
                }
            }
        }
        // CIMA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(0, 1) + sala.Localizacao;
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Baixo"))
                {
                    if (Mathf.Abs(novaSala.Localizacao.x) < Level.limiteSalasAxis &&
                        Mathf.Abs(novaSala.Localizacao.y) < Level.limiteSalasAxis)
                    {
                        GeraSala(novaSala);
                    }
                }
            }
        }
        // BAIXO
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(0, -1) + sala.Localizacao;
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Cima"))
                {
                    if (Mathf.Abs(novaSala.Localizacao.x) < Level.limiteSalasAxis &&
                        Mathf.Abs(novaSala.Localizacao.y) < Level.limiteSalasAxis)
                    {
                        GeraSala(novaSala);
                    }
                }
            }
        }
    }

    void GerarSalaBoss()
    {
        float numMax = 0f;
        Vector2 salaMaisDistante = Vector2.zero;

        foreach (Sala sala in Level.Salas)
        {
            if (Mathf.Abs(sala.Localizacao.x) + Mathf.Abs(sala.Localizacao.y) >= numMax)
            {
                numMax = Mathf.Abs(sala.Localizacao.x) + Mathf.Abs(sala.Localizacao.y);
                salaMaisDistante = sala.Localizacao;
            }
        }

        Sala salaBoss = new Sala();
        salaBoss.ID = 1;
        salaBoss.SalaIcon = Level.bossRoomIcon;

        // ESQUERDA
        if (!ChecaSalaExiste(salaMaisDistante + new Vector2(-1, 0)))
        {
            if (!ChecaSalaAoRedorExiste(salaMaisDistante + new Vector2(-1, 0), "Direita"))
            {
                salaBoss.Localizacao = salaMaisDistante + new Vector2(-1, 0);
            }
        }
        // DIREITA
        else if (!ChecaSalaExiste(salaMaisDistante + new Vector2(1, 0)))
        {
            if (!ChecaSalaAoRedorExiste(salaMaisDistante + new Vector2(1, 0), "Esquerda"))
            {
                salaBoss.Localizacao = salaMaisDistante + new Vector2(1, 0);
            }
        }
        // CIMA
        else if (!ChecaSalaExiste(salaMaisDistante + new Vector2(0, 1)))
        {
            if (!ChecaSalaAoRedorExiste(salaMaisDistante + new Vector2(0, 1), "Baixo"))
            {
                salaBoss.Localizacao = salaMaisDistante + new Vector2(0, 1);
            }
        }
        // BAIXO
        else if (!ChecaSalaExiste(salaMaisDistante + new Vector2(0, -1)))
        {
            if (!ChecaSalaAoRedorExiste(salaMaisDistante + new Vector2(0, -1), "Cima"))
            {
                salaBoss.Localizacao = salaMaisDistante + new Vector2(0, -1);
            }
        }

        DesenhaNoMinimapa(salaBoss);
    }

    void ListaAleatoria<T>(List<T> list)
    {
        int n = list.Count;
        System.Random rng = new System.Random();

        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }
    bool GeraSalaEspecial(Sprite salaIcon, int ID)
    {
        List<Sala> listaAleatoria = new List<Sala>(Level.Salas);

        Sala salaEspecial = new Sala();
        salaEspecial.ID = ID;
        salaEspecial.SalaIcon = salaIcon;

        bool encontrouLugarDisponivel = false;

        foreach (Sala sala in listaAleatoria)
        {
            Vector2 localizacaoSalaEspecial = sala.Localizacao;

            if (sala.ID < 6) continue;

            // ESQUERDA
            if (!ChecaSalaExiste(localizacaoSalaEspecial + new Vector2(-1, 0)))
            {
                if (!ChecaSalaAoRedorExiste(localizacaoSalaEspecial + new Vector2(-1, 0), "Direita"))
                {
                    salaEspecial.Localizacao = localizacaoSalaEspecial + new Vector2(-1, 0);
                    encontrouLugarDisponivel = true;
                }
            }
            // DIREITA
            else if (!ChecaSalaExiste(localizacaoSalaEspecial + new Vector2(1, 0)))
            {
                if (!ChecaSalaAoRedorExiste(localizacaoSalaEspecial + new Vector2(1, 0), "Esquerda"))
                {
                    salaEspecial.Localizacao = localizacaoSalaEspecial + new Vector2(1, 0);
                    encontrouLugarDisponivel = true;
                }
            }
            // CIMA
            else if (!ChecaSalaExiste(localizacaoSalaEspecial + new Vector2(0, 1)))
            {
                if (!ChecaSalaAoRedorExiste(localizacaoSalaEspecial + new Vector2(0, 1), "Baixo"))
                {
                    salaEspecial.Localizacao = localizacaoSalaEspecial + new Vector2(0, 1);
                    encontrouLugarDisponivel = true;
                }
            }
            // BAIXO
            else if (!ChecaSalaExiste(localizacaoSalaEspecial + new Vector2(0, -1)))
            {
                if (!ChecaSalaAoRedorExiste(localizacaoSalaEspecial + new Vector2(0, -1), "Cima"))
                {
                    salaEspecial.Localizacao = localizacaoSalaEspecial + new Vector2(0, -1);
                    encontrouLugarDisponivel = true;
                }
            }
            if (encontrouLugarDisponivel)
            {
                DesenhaNoMinimapa(salaEspecial);
                return true;
            }
        }
        return false;
    }

    void Start()
    {
        Level.normalRoomIcon = ArraySprites[0];
        Level.atualRoomIcon = ArraySprites[1];
        Level.bossRoomIcon = ArraySprites[2];
        Level.lojaRoomIcon = ArraySprites[3];
        Level.desconhecidoRoomIcon = ArraySprites[4];               

        // PARA DESENHAR O INÍCIO, SEMPRE NO MEIO DO MAPA:
        Sala salaInicial = new Sala();
        salaInicial.Localizacao = new Vector2(0, 0);
        salaInicial.SalaIcon = Level.atualRoomIcon;
        salaInicial.ID = 0;

        DesenhaNoMinimapa(salaInicial);

        // ESQUERDA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(-1, 0);
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Direita"))
                {
                    GeraSala(novaSala);
                }
            }
        }
        // DIREITA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(1, 0);
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Esquerda"))
                {
                    GeraSala(novaSala);
                }
            }
        }
        // CIMA
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(0, 1);
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Baixo"))
                {
                    GeraSala(novaSala);
                }
            }
        }
        // BAIXO
        if (Random.value > Level.Chance)
        {
            Sala novaSala = new Sala();
            novaSala.Localizacao = new Vector2(0, -1);
            novaSala.SalaIcon = Level.normalRoomIcon;
            novaSala.ID = NumeroDeSalaAlteatorio();

            if (!ChecaSalaExiste(novaSala.Localizacao))
            {
                if (!ChecaSalaAoRedorExiste(novaSala.Localizacao, "Cima"))
                {
                    GeraSala(novaSala);
                }
            }
        }

        GerarSalaBoss();
        bool validaLoja = GeraSalaEspecial(Level.lojaRoomIcon, 2);

        if (!validaLoja)
        {
            RecriarMapa();
        }
    }

    bool recriando = false;
    void PararDeRecriarMapa()
    {
        recriando = false;
    }
    void RecriarMapa()
    {
        recriando = true;

        Level.Salas.Clear();

        Invoke(nameof(PararDeRecriarMapa), 1);
        for (int i = transform.childCount - 1; i >= 0; i--)
        {
            Transform child = transform.GetChild(i);
            Destroy(child.gameObject);
        }
    }



}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Level : MonoBehaviour
{
    public static float largura = 500, altura = 500;

    public static float escala = 1.0f, escalaIcon = 0.1f, preenchimento = 0.01f;

    public static float Chance = 0.5f;

    public static int limiteSalasAxis = 6;

    public static Sprite lojaRoomIcon, desconhecidoRoomIcon, normalRoomIcon, atualRoomIcon, bossRoomIcon;

    public static List<Sala> Salas = new();
    public static Sala atualSala;
}

public class Sala
{
    public int ID = 6;
    public Vector2 Localizacao;
    public Sprite SalaIcon;
}